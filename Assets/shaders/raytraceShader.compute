#include "UnityCG.cginc"

#pragma kernel CSMain

static const float PI = 3.14159f;

struct Sphere {
    float3 position;
    float radius;
    float3 colour;
    float3 emissionColour;
    float emissionStrength;
};

struct Ray {
    float3 src;
    float3 dir;
};

struct RayCollision {
    float3 position;
    float distance;
    float3 normal;
    float3 colour;
    float3 emissionColour;
    float emissionStrength;
};

float4x4 _CameraToWorld;
float3 _ViewParams;
int _Bounces;
StructuredBuffer<Sphere> _Spheres;
int _NumSpheres;
int _NumRays;
RWTexture2D<float4> Result;

// PCG from shadertoy.com / Sebastian Lague
float randomNumber(inout uint rngState) {
    
    rngState *= 747796405 + 2891336453;
    uint result = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
    result = (result >> 22) ^ result;
    return result / 4294967295.0;
} 

float3 randomHemisphereDirection(float3 hitNormal, inout uint rngState) {

    float x = randomNumber(rngState);
    float y = randomNumber(rngState);
    float z = randomNumber(rngState);
    float3 newDir = normalize(float3(x, y, z));

    return newDir * sign(dot(newDir, hitNormal));
}

RayCollision sphereCollision(Ray ray) {

    RayCollision closestIntersect;
    closestIntersect.distance = 1.#INF;

    for (int i = 0; i < _NumSpheres; i++) {

        Sphere sphere = _Spheres[i];

        float3 offsetRaySrc = ray.src - sphere.position;

        float a = dot(ray.dir, ray.dir);
        float b = 2 * dot(offsetRaySrc, ray.dir);
        float c = dot(offsetRaySrc, offsetRaySrc) - sphere.radius * sphere.radius;

        float disc = b * b - 4 * a * c;

        // no intersection
        if (disc < 0) {
            continue;
        }

        float distanceToIntersection = (-b - sqrt(disc)) / (2*a);

        if (distanceToIntersection >= 0 && distanceToIntersection < closestIntersect.distance) {
            closestIntersect.distance = distanceToIntersection;
            closestIntersect.normal = normalize(closestIntersect.position - sphere.position.xyz);
            closestIntersect.position = ray.src + ray.dir * distanceToIntersection;
            closestIntersect.colour = sphere.colour;
            closestIntersect.emissionColour = sphere.emissionColour;
            closestIntersect.emissionStrength = sphere.emissionStrength;
        }
    }

    return closestIntersect;
}

float3 Trace(Ray ray, inout uint rngState) {

    float3 colour = float3(1,1,1);
    float3 light = float3(0,0,0);

    for (int i = 0; i < _Bounces; i++) {
        RayCollision rc = sphereCollision(ray);

        if (rc.distance < 1.#INF) {
            ray.src = rc.position;
            ray.dir = randomHemisphereDirection(rc.normal, rngState);

            light += rc.emissionColour * rc.emissionStrength * colour;
            colour *= rc.colour;
            
        } else {
            break;
        }
    }

    return light;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2(id.xy / float2(width, height));

    float3 viewPointID = float3(uv - 0.5, 1) * _ViewParams;
    float3 viewPoint = mul(_CameraToWorld, float4(viewPointID, 1));

    Ray ray;
    ray.src = _WorldSpaceCameraPos;
    ray.dir = normalize(viewPoint - ray.src);

    uint2 numPixels = uint2(width, height);
    uint2 pixelCoord = uv * numPixels;
    uint pixelIndex = pixelCoord.y * numPixels.x + pixelCoord.x;

    float3 sum = float3(0, 0, 0);
    for (int i = 0; i < _NumRays; i++) {
        sum += Trace(ray, pixelIndex);
    }

    float3 output = sum/_NumRays;
    Result[id.xy] = float4(output, 1);
}