#include "UnityCG.cginc"

#pragma kernel CSMain

static const float PI = 3.14159f;

struct Sphere {
    float3 position;
    float radius;
    float3 colour;
    float3 emissionColour;
    float emissionStrength;
};

struct Ray {
    float3 src;
    float3 dir;
};

struct RayCollision {
    float3 position;
    float distance;
    float3 normal;
    float3 colour;
    float3 emissionColour;
    float emissionStrength;
};

struct Triangle {
    float3 p1;
    float3 p2;
    float3 p3;
    float3 colour;
    float3 emissionColour;
    float emissionStrength;
};

float4x4 _CameraToWorld;
float3 _ViewParams;
int _Bounces;
StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<Triangle> _Triangles;
int _NumTris;
int _NumSpheres;
int _NumRays;
int _FrameNum;
RWTexture2D<float4> Result;
RWTexture2D<float4> _PrevFrame;

// PCG from shadertoy.com / Sebastian Lague
float randomNumber(inout uint state) {
    
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;
    return result / 4294967295.0;
} 

float3 randomHemisphereDirection(float3 hitNormal, inout uint rngState) {

    float x = randomNumber(rngState);
    float y = randomNumber(rngState);
    float z = randomNumber(rngState);
    float3 newDir = normalize(float3(x, y, z));

    return newDir;// * sign(dot(hitNormal, newDir));
}

RayCollision SphereCollision(Ray ray) {

    RayCollision closestIntersect;
    closestIntersect.distance = 1.#INF;

    for (int i = 0; i < _NumSpheres; i++) {

        Sphere sphere = _Spheres[i];

        float3 offsetRaySrc = ray.src - sphere.position;

        float a = dot(ray.dir, ray.dir);
        float b = 2 * dot(offsetRaySrc, ray.dir);
        float c = dot(offsetRaySrc, offsetRaySrc) - sphere.radius * sphere.radius;

        float disc = b * b - 4 * a * c;

        // no intersection
        if (disc < 0) {
            continue;
        }

        float distanceToIntersection = (-b - sqrt(disc)) / (2*a);

        if (distanceToIntersection >= 0 && distanceToIntersection < closestIntersect.distance) {
            closestIntersect.distance = distanceToIntersection;
            closestIntersect.normal = normalize(closestIntersect.position - sphere.position.xyz);
            closestIntersect.position = ray.src + ray.dir * distanceToIntersection;
            closestIntersect.colour = sphere.colour;
            closestIntersect.emissionColour = sphere.emissionColour;
            closestIntersect.emissionStrength = sphere.emissionStrength;
        }
    }

    return closestIntersect;
}

RayCollision TriCollision(Ray ray) {

    RayCollision closestIntersect;
    closestIntersect.distance = 1.#INF;

    for (int i = 0; i < _NumTris; i++) {

        Triangle tri = _Triangles[i];

        float3 planeNormal = cross(tri.p2 - tri.p1, tri.p3 - tri.p1);

        // Ray and plane are parallel, and do not intersect
        if (dot(planeNormal, ray.dir) == 0) {
            continue;
        }

        // distance from origin to the plane parallel to the plane normal
        float3 d = -dot(planeNormal, tri.p1);

        // distance along the ray to intersect the plane
        float t = -(dot(planeNormal, ray.src) + d) / dot(planeNormal, ray.dir);

        // triangle is behind the camera
        if (t < 0) {
            continue;
        }

        float3 p = ray.src + t * ray.dir;
        
        float3 e1 = tri.p2 - tri.p1;
        float3 e2 = tri.p3 - tri.p2;
        float3 e3 = tri.p1 - tri.p3;

        float3 hitVec1 = p - tri.p1;
        float3 hitVec2 = p - tri.p2;
        float3 hitVec3 = p - tri.p3;

        // in-out test for whether the hit point of the ray on the plane is within the triangle or not
        if (dot(planeNormal, cross(e1, hitVec1)) > 0 && dot(planeNormal, cross(e2, hitVec2)) > 0 && dot(planeNormal, cross(e3, hitVec3)) > 0) {
            if (t < closestIntersect.distance) {
                closestIntersect.distance = t;
                closestIntersect.position = p;
                closestIntersect.normal = planeNormal;
                closestIntersect.colour = tri.colour;
                closestIntersect.emissionColour = tri.emissionColour;
                closestIntersect.emissionStrength = tri.emissionStrength;
            } 
        }
    }

    return closestIntersect;
}

float3 Trace(Ray ray, inout uint rngState) {

    float3 colour = float3(1,1,1);
    float3 light = float3(0,0,0);

    for (int i = 0; i < _Bounces; i++) {
        RayCollision rc = SphereCollision(ray);
        RayCollision rcTri = TriCollision(ray);

        if (rcTri.distance < rc.distance) {
            rc = rcTri;
        }

        if (rc.distance < 1.#INF) {
            ray.src = rc.position;
            ray.dir = randomHemisphereDirection(rc.normal, rngState);
            // ray.dir = reflect(ray.dir, rc.normal);

            light += rc.emissionColour * rc.emissionStrength * colour;
            colour *= rc.colour;
            
        } else {
            // light += float3(0,0,0.5) * colour;
            break;
        }
    }

    return light;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2(id.xy / float2(width, height));

    float3 viewPointID = float3(uv - 0.5, 1) * _ViewParams;
    float3 viewPoint = mul(_CameraToWorld, float4(viewPointID, 1));

    Ray ray;
    ray.src = _WorldSpaceCameraPos;
    ray.dir = normalize(viewPoint - ray.src);

    uint2 numPixels = uint2(width, height);
    uint2 pixelCoord = uv * numPixels;
    uint pixelIndex = pixelCoord.y * numPixels.x + pixelCoord.x;
    uint rngState = pixelIndex + _FrameNum * 8901724;

    float3 sum = float3(0, 0, 0);
    for (int i = 0; i < _NumRays; i++) {
        sum += Trace(ray, rngState);
    }

    float3 output = sum/_NumRays;

    float frameWeight = 1.0 / (_FrameNum + 1);
    Result[id.xy] = _PrevFrame[id.xy];
    _PrevFrame[id.xy] = _PrevFrame[id.xy] * (1-frameWeight) + float4(output, 1) * frameWeight;
}